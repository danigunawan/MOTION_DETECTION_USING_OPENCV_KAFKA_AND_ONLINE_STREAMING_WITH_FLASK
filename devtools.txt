
MOTION DETECTION USING OPENCV, KAFKA & ONLINE STREAMING WITH FLASK

REFF : 
PLAYLIST :
https://www.youtube.com/watch?v=mVKN_Bld71w&list=PLS1lqxOwNjOahzD7u7TqOzCbzMCrKSJmv


LIST TOPIC :
1. Motion Detection Application
2. Work With Kafka
3. Work With Flask

GOALS :
- Develop a motion detection application that can
++ Record a video only when 
++ Be able to watch the video online
++ Be able to adjust your parameters according to what you want to detect : small events or only big events

- A Proof of Concept (POC) application using Apache Kafka Using Image Processing 
- Use Flask to Able to watch our video online realtime 

#### CARA 1 INSTALL APACHE KAFKA ZOOKEPER ####

1. Motion Detection using OpenCV, Apache Kafka and Online Streaming with Flask #1

Additional :

- OPENCV
https://docs.opencv.org/3.3.0/db/d5c/tutorial_py_bg_subtraction.html

- KAFKA
https://kafka.apache.org/

- KAFKA LEARN
https://www.tutorialkart.com/apache-kafka/create-a-topic-in-apache-kafka/

download :
Source download: 
kafka-2.2.0-src.tgz (asc, sha512)
Binary downloads:
Scala 2.12  - kafka_2.12-2.2.0.tgz (asc, sha512)

# Quic Start Installation
https://kafka.apache.org/quickstart

# Installation Kafka With Mac OSX
https://www.tutorialkart.com/apache-kafka/install-apache-kafka-on-mac/

# Install With Homebrew MAC OSX 
https://medium.com/@Ankitthakur/apache-kafka-installation-on-mac-using-homebrew-a367cdefd273

RUNNING KAFKA :
# 1. Zookeper Run
- cd /Volumes/HDD500-DANI/KAFKA/kafka_2.12-2.2.0
- sh bin/zookeeper-server-start.sh config/zookeeper.properties


# START KAFKA

- nano config/server.properties 
uncomment :
listeners=PLAINTEXT://:9092 

note : fix issue WARN [Controller id=0, targetBrokerId=0] Connection to node 0 could not be established. Broker may not be available. (org.apache.kafka.clients.NetworkClient)

Running Kafka Server
- bin/kafka-server-start.sh config/server.properties


# 2. Create Kafka Topic
./kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 1 --partitions 1 --topic sampleTopic


# 3. Initialize Producer Console :

./kafka-console-producer.sh --broker-list localhost:9092 --topic sampleTopic

# 4. Initialize Consumer console:
./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic sampleTopic --from-beginning

#### END CARA INSTALL APACHE KAFKA ZOOKEPER ####


#### CARA 2 INSTALL APACHE KAFKA ZOOKEPER ####

1. Motion Detection using OpenCV, Apache Kafka and Online Streaming with Flask #2
sudo apt-get update
sudo apt-get upgrade
sudo apt-get install build-essential cmake pkg-config
sudo apt-get install libjpeg8-dev libtiff5-dev libjasper-dev libpng12-dev
sudo apt-get install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev 
sudo apt-get install libxvidcore-dev libx264-dev
sudo apt-get install libgtk-3-dev
sudo apt-get install libatlas-base-dev gfortran
sudo apt-get install python2.7-dev python3.5-dev

GET OPENCV VERSION THAT YOU ARE USING 

cd ~
wget https://bootstrap.pypa.io/get-pip.py
sudo python get-pip.py

sudo pip install virtualenv virtualenvwrapper
sudo rm -rf ~/get-pip.py ~/.cache/pip

#virtualenv and virtualenvwrapper
export WORKON_HOME=$HOME/.virtualsenv
source /usr/local/bin/virtualenvwrapper.sh

echo -e "\n# virtualenv and virtualenvwrapper" >> ~/.bashrc
echo "export WORKON_HOME=$HOME/.virtualenvs" >> ~/.bashrc
echo "source /usr/local/bin/virtualenvwrapper.sh" >> ~/.bashrc
source ~/.bashrc

mkvirtualenv cv2 -p python2
mkvirtualenv cv -p python3

sudo apt-get install python3-pip
sudo pip install numpy scipy jupyter


ls -la
ls .virtualenvs/

workon cv

jika conda : 

conda create -n py36 python=3.6 anaconda

conda activate py36

cd ~/opencv-3.1.0/
mkdir build
cd build
cmake 
-D CMAKE_BUILD_TYPE=RELEASE \
-D CMAKE_INSTALL_PREFIX=/usr/local \
-D INSTALL_PYTHON_EXAMPLES=ON \
-D INSTALL_C_EXAMPLES=OFF \
-D OPENCV_EXTRA_MODULES_PATH=~/opencv_contrib-3.1.0/modules \
-D PYTHON_EXECUTABLE=~/virtualenvs/cv/bin/python \
-D BUILD_EXAMPLES=ON ..

make -j4

if any errors :
make clean
make

sudo make install
sudo ldconfig

For Python 2.7
===============
ls -l /usr/local/lib/python2.7/site-packages/  # look for the cv2.so file
cd ~/.virtualenvs/cv/lib/python2.7/site-packages
ln -s /usr/local/lib/python2.7/site-packages/cv2.so cv2.so

For Python 3.5
===============
ls -l /usr/local/lib/python3.5/site-packages/

cd /usr/local/lib/python3.5/site-packages/
sudo mv cv2.cpython-35m-x86_64-linux-gnu.so cv2.so

cd ~/.virtualenvs/cv/lib/python3.5/site-packages/
ln -s /usr/local/lib/python3.5/site-packages/cv2.so cv2.so


cd ~
workon cv
python
import cv2
cv2.__version__
exit()

jupyter notebook
import pyspark


2. Motion Detection Apache Kafka OpenCV #4

Reff : https://towardsdatascience.com/getting-started-with-apache-kafka-in-python-604b3250aa05

JAVA Installation
=================
sudo apt-get update
sudo apt-get install default-jdk

First Add Oracle PPA, then update your package repository :

sudo add-apt-repository ppa:webupd8team/java 
sudo apt-get update
sudo apt-get install oracle-java8-installer
sudo update-alternatives --config java


sudo update-alternatives --config java
sudo nano /etc/environment
JAVA_HOME="/usr/lib/jvm/java-8-oracle"
source /etc/environment
echo $JAVA_HOME

cd ~
nano HelloWorld.java

public class HelloWorld {
    public static void main(string[] args){
        //Prints "Hello World" to the terminal windows.
        System.out.println("Hello World")
    }
}

Javac HelloWorld.java
java HelloWorld 

#### CARA 2 INSTALL APACHE KAFKA ####

3. Motion Detection Apache Kafka OpenCV #5
====================================

ApacheKafka Installation

head to kafka.apache.org
Intro : https://kafka.apache.org/intro
Quickstart : https://kafka.apache.org/quickstart
What Is Apache Kafka : https://techbeacon.com/app-dev-testing/what-apache-kafka-why-it-so-popular-should-you-use-it
Tutorial : https://www.tutorialspoint.com/apache_kafka/index.htm

wget http://apache.claz.org/kafka/2.2.0/kafka_2.12-2.2.0.tgz

or 

wget https://www.apache.org/dyn/closer.cgi?path=/kafka/2.2.0/kafka_2.12-2.2.0.tgz

or 

wget https://downloads.apache.org/kafka/2.2.0/kafka_2.12-2.2.0.tgz

tar -xzf kafka_2.12-2.2.0.tgz
cd kafka_2.12-2.2.0

# Run Zookeper Service
cd /Volumes/HDD500-DANI/KAFKA/kafka_2.12-2.2.0
sh bin/zookeeper-server-start.sh config/zookeeper.properties # or bin/zookeeper-server-start.sh config/zookeper.properties

# Run Kafka Service
cd /Volumes/HDD500-DANI/KAFKA/kafka_2.12-2.2.0
bin/kafka-server-start.sh config/server.properties

- nano config/server.properties 
uncomment :
listeners=PLAINTEXT://:9092 

note : fix issue WARN [Controller id=0, targetBrokerId=0] Connection to node 0 could not be established. Broker may not be available. (org.apache.kafka.clients.NetworkClient)

workon cv
java 
javac

# Create A Topic
bin/kafka-topics.sh --create --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1--topic test
bin/kafka-topics.sh --list --bootstrap-server localhost:9092

# Test Server By Sending Messages
bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test
bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning

# To Use It With Python
Install kafka python via pip :

pip install kafka-python

#### END CARA 2 INSTALL APACHE KAFKA ####

4. Motion Detection Apache Kafka OpenCV #6

- OPENCV
https://docs.opencv.org/3.3.0/db/d5c/tutorial_py_bg_subtraction.html

- FLASK
flask.pooco.org

pip install flask

nano hello.py

isikan : 

from flask import Flask, escape, request

app = Flask(__name__)

@app.route('/')
def hello():
    name = request.args.get("name", "World")
    return f'Hello, {escape(name)}!'


5. Motion Detection Apache Kafka OpenCV #7

- OPENCV
https://docs.opencv.org/3.3.0/db/d5c/tutorial_py_bg_subtraction.html

- FLASK
flask.pooco.org

- KAFKA
kafka.apache.org

nano producer.py :

import sys
import time
import cv2
from kafka import KafkaProducer
import numpy as np

# Codec Definition And Creation Of VideoWriter Object
fourcc =  cv2.VideoWriter(*'DIVX')
out = cv2.VideoWriter('motiondetect.avi', fourcc, 60.0, (1920,1080), isColor = false)


# MOG2 Segmentation
foreground = cv2.createBackgroundSubtractorMOG2(detectShadows = false)

topic = "kafka_video"

def publish_video(video_file):

    # run producer.py
    producer = KafkaProducer(bootstrap_servers = 'localhost:9092')

    # define VideoCapture
    cap = cv2.VideoCapture(video_file)

    print('publishing video...')

    while(cap.isOpened()):
        success, camframe = cap.read()

        # make sure it works
        if not success:
            print("bad read")
            break

        # Convert Image to JPG
        ret, buffer = cv2.imencode('.jpg', camframe)

        # Break them up into bytes for kafka
        producer.send(topic, buffer.tobytes())

        time.sleep(0.2)

    cap.release()
    print('end of stream')

def publish_camera():

    # Run producer.py
    producer = KafkaProducer(bootstrap_servers='localhost:9092')

    camera = cv2.VideoCapture(0)
    camera.set(cv2.CAP_PROP_FRAME_WIDTH, 1920)
    camera.set(cv2.CAP_PROP_FRAME_HEIGHT, 1080)
    camera.set(cv2.CAP_PROP_FPS, 6)

    try:
        while(true):
            success, camframe = camera.read()
            grayframe = cv2.cvtcolor(camframe, cv2.COLOR_BGR2GRAY)
            blurframe = cv2.GaussianBlur(camframe, (5,5), 0)

            #Capture Motion
            motionframe = foreground.apply(grayframe)
            detect = (np.sum(motionframe))//255
            if detect > 30:
                print("Object in motion size = ", detect)

                # Save Stream to .avi .file
                out.write(grayframe)

            ret, buffer = cv2.imencode('.jpg', grayframe)
            producer.send(topic, buffer.tobytes())

            # Give Some time for processing
            time.sleep(0.2)

    except:
        print("\nWe are done.")
        sys.exit(1)

    camera.release()
    out.release()

if __name__ == '__main__':
    if(len(sys.argv) > 1 ):
        video_path = sys.argv[1]
        publish_video(video_path)
    else:
        print("We Are Live !)
publish_camera()



nano consumer.py :

import datetime
from flask import Flask, Response
from kafka import KafkaConsumer


# Start consumer.py
topic = "kafka_video"

consumer = KafkaConsumer(
    topic,
    bootstrap_servers = ['localhost:9092']
)

# Get The Flask App Ready for view

app = Flask(__name__)
@app.route('/video', method=['GET'])

def video():
    return Response(
        get_video_stream(),
        mimetype = 'multipart/x-mixed-replace; boundary=frame')

def get_video_stream():
    for msg in consumer:
        yield('b--frame\r\n
               b'Content-Type: image/jpg)


# Run Producer
python producer.py

# Run Consume
python consumer.py